// AutoGen - Do not modify


memref.global "private" constant @f1 : memref<5x5x1x6xf32> = dense<[[[[0.051123,0.053923,0.153989,0.283608,0.194688,-0.169896]],[[-0.027835,0.136170,0.020032,0.218792,0.203850,0.006962]],[[-0.222570,0.009325,0.132387,0.056164,0.182860,0.143123]],[[-0.124976,0.095790,0.018877,0.270091,-0.200270,0.086564]],[[0.264156,0.026509,0.105018,0.215741,-0.266818,0.256326]]],[[[-0.224551,0.212953,-0.096470,0.082916,0.175419,0.227917]],[[-0.230159,0.210700,0.087941,-0.101955,-0.006190,0.189309]],[[-0.192066,0.067069,0.227431,0.022616,0.165678,0.190631]],[[-0.044746,0.197696,0.201720,-0.020551,-0.134328,0.389258]],[[0.270510,0.119009,0.007116,0.225270,-0.194345,0.356587]]],[[[-0.193502,0.098587,0.137952,-0.183880,0.044711,0.230626]],[[-0.281137,0.114639,0.050740,0.056031,-0.068229,-0.059371]],[[0.060259,0.249942,0.294948,-0.132806,-0.076474,0.206412]],[[-0.013917,0.230048,0.295449,-0.109977,0.223142,0.118083]],[[0.234239,0.230984,-0.017426,0.240925,0.180160,0.189351]]],[[[-0.088097,-0.055706,0.150638,0.018424,-0.274470,-0.063277]],[[-0.248235,-0.234051,-0.067845,-0.242215,-0.218583,-0.110564]],[[-0.079038,-0.073050,0.077215,-0.153986,0.147499,-0.045690]],[[0.203185,-0.219654,0.105407,-0.048649,0.035408,0.044242]],[[0.181988,-0.135434,0.062530,-0.048759,0.015740,-0.035489]]],[[[0.096609,-0.103403,0.137624,-0.183457,-0.071005,-0.148468]],[[-0.236236,0.039780,0.232034,-0.183092,0.082083,0.048829]],[[-0.033064,-0.266392,0.169290,-0.127000,-0.160845,-0.151136]],[[0.080950,-0.299055,-0.124414,-0.151763,0.195955,0.048726]],[[0.175812,-0.179466,0.152295,0.095537,0.140062,0.082301]]]]>
func @main() -> ()
{
    // Global register id starts at: 0
    // Layer type: Input
    // Layer tame: input_1
    // Input from Prev. layer: nan
    // Input size: 1 28 28 1 
    %0 = memref.alloc() : memref<1x28x28x1xf32>

    // Layer type: Conv2D
    // Layer name: conv2d
    // Input from layer: input_1
    // Input buffer: %0 : memref<1x28x28x1xf32>
    // Kernel dim.: 5 5 1 6 
    // Stride dim.: 1 1 
    // Dilation rates: 1 1 
    // Output size: 1 28 28 6 
    // Padding: [ 1 1 ] [ 1 1 ] 
    %1 = memref.get_global @f1 : memref<5x5x1x6xf32>
    call @print_memref_4d_f32(%1) : (memref<5x5x1x6xf32>) -> ()

    %2 = memref.alloc() : memref<1x28x28x6xf32>
    linalg.conv(%1, %0, %2)
    {
        dilations = [1, 1],
        padding = dense<[[1, 1], [1, 1]]> : tensor<2x2xi64>,
        strides = [1, 1]
    } : memref<5x5x1x6xf32>, memref<1x28x28x1xf32>, memref<1x28x28x6xf32>
    

    return
}

func private @print_memref_4d_f32(memref<5x5x1x6xf32>) attributes { llvm.emit_c_interface }
